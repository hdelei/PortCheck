
import java.awt.Color;
import java.awt.Image;
import java.util.ArrayList;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;



/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Vanderlei
 */
public class Window extends javax.swing.JFrame {
    ArrayList<Image> icons;// = Icons.getList();
    Icons img = new Icons();
    
    
    //ImageIcon imageicon = new ImageIcon(getClass().getClassLoader().getResource("img/rj45-0.png"));
    //Image teste = imageicon.getImage();
    
    
    /**
     * Creates new form Window
     */
    public Window() {
        initComponents();           
        this.getContentPane().setBackground(new Color(109, 4, 152));
        this.setLocationRelativeTo(null);        
        
        icons = img.getList();
        this.setIconImages(icons);
        
        lblClear.setIcon(new ImageIcon(getClass().
                    getClassLoader().getResource("img/clear.png")));
        lblAbout.setIcon(new ImageIcon(getClass().
                    getClassLoader().getResource("img/about.png")));
        lblClear.setToolTipText("Clear fields");
        lblAbout.setToolTipText("<html>Created by hdelei<br>"
                + "suggestions: hdelei@gmail.com<br></html>");
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtIP = new javax.swing.JTextField();
        txtPort = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtReturnedIP = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        lblClipboard = new javax.swing.JLabel();
        lblClear = new javax.swing.JLabel();
        lblAbout = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("VM Check Ports");
        setBackground(new java.awt.Color(109, 4, 152));
        setIconImages(null);
        setResizable(false);

        jButton1.setText("Check");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Port status");

        txtIP.setText("google.com");
        txtIP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtIPKeyReleased(evt);
            }
        });

        txtPort.setText("80");
        txtPort.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPortKeyReleased(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Verdana", 1, 11)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 102));
        jLabel2.setText("Hostname or IP");

        jLabel3.setFont(new java.awt.Font("Verdana", 1, 11)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 102));
        jLabel3.setText("Port");

        txtReturnedIP.setEditable(false);
        txtReturnedIP.setBackground(new java.awt.Color(102, 102, 102));
        txtReturnedIP.setForeground(new java.awt.Color(204, 204, 204));

        jLabel4.setFont(new java.awt.Font("Verdana", 1, 11)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 102));
        jLabel4.setText("Returned IP");

        lblClipboard.setText("Click to try paste from clipboard");
        lblClipboard.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblClipboardMouseClicked(evt);
            }
        });

        lblClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/clear.png"))); // NOI18N
        lblClear.setToolTipText("Clear IP and port");
        lblClear.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        lblClear.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblClearMouseClicked(evt);
            }
        });

        lblAbout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/about.png"))); // NOI18N
        lblAbout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblAboutMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtIP, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(lblClipboard)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblClear)
                        .addContainerGap(29, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(lblAbout))))
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(txtReturnedIP, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)))
                    .addComponent(lblAbout))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblClear, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtReturnedIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblClipboard)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        //Chama em nova thread para permitir bloquear o botão
        //enquanto a tarefa não termina
        new Thread(this::runCheckPort).start();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void txtIPKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIPKeyReleased
        // TODO add your handling code here:
        jLabel1.setText("Port status");
        
    }//GEN-LAST:event_txtIPKeyReleased

    private void txtPortKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPortKeyReleased
        // TODO add your handling code here:
        jLabel1.setText("Port status");
        
        
    }//GEN-LAST:event_txtPortKeyReleased

    private void lblClipboardMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblClipboardMouseClicked
        // TODO add your handling code here:
        MyClipboard obtain = new MyClipboard();
        txtIP.setText(obtain.getURL());
        txtPort.setText(Integer.toString(obtain.getPort()));       
        
    }//GEN-LAST:event_lblClipboardMouseClicked

    private void lblClearMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblClearMouseClicked
        // TODO add your handling code here:
        txtIP.setText("");
        txtPort.setText("");
        txtReturnedIP.setText("");
        txtIP.requestFocus();
    }//GEN-LAST:event_lblClearMouseClicked

    private void lblAboutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblAboutMouseClicked
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(this, "created by Hdelei \n" +
                "sugestions: hdelei@gmail.com");
    }//GEN-LAST:event_lblAboutMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Window().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel lblAbout;
    private javax.swing.JLabel lblClear;
    private javax.swing.JLabel lblClipboard;
    private javax.swing.JTextField txtIP;
    private javax.swing.JTextField txtPort;
    private javax.swing.JTextField txtReturnedIP;
    // End of variables declaration//GEN-END:variables

    /**
     * 
     * @param port do tipo String
     * @return _port do tipo int mediante validação.
     * A validação se dá através de Regex.
     * este método também atualiza o campo txtPort com a informação invalid
     * conforme a necessidade
     */
    private int portValidate(String port){    
        int _port = 0;
        if (port.matches("^[0-9]+$")) {
            _port = Integer.parseInt(port);            
        }
        else{
            txtPort.setText("invalid!");
            txtPort.requestFocus();
        }
        return _port;
    }
    /**
     * Este método instancia o objeto AddressHandle que por sua vez
     * cuida de validar e traduzir o host e também verifica se a porta
     * está aberta ou fechada. 
     */
    private void runCheckPort() {
        jButton1.setText("Checking...");
        jButton1.setEnabled(false);
        
        String ip = txtIP.getText();
        int port = portValidate(txtPort.getText());        
        
        boolean portIsOpen;
        
        AddressHandle myCheck = new AddressHandle(ip, port);
        portIsOpen = myCheck.portIsOpen();
        //isValidIP = myCheck.IsValidIP();
        
        if (!myCheck.getIP().equals("")) {
            if (portIsOpen) {
                jLabel1.setText("Port "+ port +" is open");
            }
            else{
                jLabel1.setText("Port " + port +  " is closed");
            }
        }
        else{
            jLabel1.setText("Invalid Address!");
            //System.out.println(isValidIP);
        }
        
         
        
//        if(portIsOpen){
//            jLabel1.setText("Port "+ port +" is open");            
//        }
////        else if(!portIsOpen && !isValidIP){
////            jLabel1.setText("Invalid address!");
////        }
//        else{
//            
//            if (isValidIP) {
//                jLabel1.setText("Port " + port +  " is closed");
//            }
//            else{
//                jLabel1.setText("Invalid Address!");
//            }
//            
//        }
        
        txtReturnedIP.setText(myCheck.getIP());
        jButton1.setText("Check");
        jButton1.setEnabled(true);
    }
    
}
